install.packages('IRkernel')
IRkernel::installspec(user = FALSE)
sudo IRkernel::installspec(user = FALSE)
sudo IRkernel::installspec()
IRkernel::installspec()
# Set Union, Intersection, and Difference
S <- cards
S
# Set Union, Intersection, and Difference
S <- cards()
S
show(S)
library(prob)
# Set Union, Intersection, and Difference
S <- cards()
A <- subset(S, suit == "Heart")
B <- subset(S, rank %in% 7:9)
union(A, B)
intersect(A, B)
setdiff(A, B)
setdiff(B, A)
setdiff(S, A) # complement of A
outcomes <- rolldie(1)
p <- rep(1/6, times = 6)
probspace(outcomes, probs = p)
probspace(1:6, probs = p)
probspace(1:6)
# or
rolldie(1, makespace = T)
# or
rolldie(1, T)
library(prob)
# An unbalanced coin
probspace(tosscoin(1), probs = c(0.7, 0.3))
library(MASS)
library(ISLR)
install.packages("ISLR")
library(ISLR)
## Simple linear regression
names(Boston)
?Boston
plot(medv~lstat, Boston)
fit1 = lm.fit(medv~lstat, data=Boston)
fit1 = lm(medv~lstat, data=Boston)
show(fit1)
summary(fit1)
abline(fit1, col="red")
names(fit1)
confint(fit1)
predict(fit1, data.frame(lstat=c(5, 10, 15)), interval = "confidence")
### Multiple linear regression
fit2 = lm(medv ~ lstat + age, data = Boston)
summary(fit2)
fit3 = lm(medv~., Boston)
summary(fit3)
par(mfrow=c(2, 2))
plot(fit3)
fit4 = update(fit3, ~.-age-indus)
summary(fit4)
plot(fit4)
### Nonlinear terms and Interactions
fit5 = lm(medv~lstat*age. Boston)
### Nonlinear terms and Interactions
fit5 = lm(medv~lstat*age, Boston)
summary(fit5)
plot(fit5)
fit6 = lm(medv~lstat + I(lstat^2), Boston); summary(fit6)
plot(fit6)
attach(Boston)
plot(medv~lstat)
plot(medv~lstat)
par(mfrow=c(1, 1))
plot(medv~lstat)
points(lstat, fitted(fit6), col="red", pch=20)
fit7 = lm(medv~poly(lstat, 4))
points(lstat, fitted(fit7), col="blue", pch=20)
plot(1:20, 1:20, pch=1:20, cex=2)
### Qualitative predictors
fix(Carseats)
names(Carseats)
attach(Car)
fit1 = lm(Sales~. + Income:Advertising + Age:Price, Carseats)
summary(Carseats)
summary(fit1)
summary(Carseats)
contrasts(Carseats$ShelveLoc)
attach(Carseats)
regplot(Price, Sales)
### Writing R functions
regplot = function(x, y){
fit = lm(y~x);
plot(y~x);
abline(fit, col="red")
}
regplot(Price, Sales)
### Writing R functions
regplot = function(x, y, ...){
fit = lm(y~x);
plot(y~x, ...);
abline(fit, col="red")
}
regplot(Price, Sales, xlab="Price", ylab="Sales", pch=20)
regplot(Price, Sales, xlab="Price", ylab="Sales", main="Sales x Price",pch=20)
?I
install.packages("CSeqpat")
library(CSeqpat)
library(CSeqpat)
install.packages("CSeqpat")
library(CSeqpat)
file_name = "reviews_sample.txt"
result = CSeqpat(filepath = file_name,
minsupport = 100)
getwd()
pwd
ls
pwd()
ls()
setwd("/home/cloves/Documents/estudos-ML/Pattern-Mining/Mining-Quality-Phrases-from-Text-Data")
file_name = "reviews_sample.txt"
result = CSeqpat(filepath = file_name,
minsupport = 100)
result = CSeqpat(filepath = file_name,
minsupport = 100,
docdelim = "\n")
result
result = CSeqpat(filepath = file_name,
minsupport = 100,
phraselenmin = 1, phraselenmax = 99999,
docdelim = "\n")
write.table(result, file = "result.txt", sep = "\t",
row.names = FALSE)
